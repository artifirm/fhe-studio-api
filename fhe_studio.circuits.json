[{
  "_id": {
    "$oid": "65201a737b2b7b6f13517593"
  },
  "mlir": "module {\n  func.func @main(%arg0: !FHE.eint<8>) -> !FHE.eint<8> {\n    %c42_i9 = arith.constant 42 : i9\n    %0 = \"FHE.add_eint_int\"(%arg0, %c42_i9) : (!FHE.eint<8>, i9) -> !FHE.eint<8>\n    return %0 : !FHE.eint<8>\n  }\n}",
  "config": "{\"verbose\": false, \"compiler_debug_mode\": false, \"compiler_verbose_mode\": false, \"show_graph\": null, \"show_mlir\": null, \"show_optimizer\": null, \"show_statistics\": null, \"dump_artifacts_on_unexpected_failures\": true, \"enable_unsafe_features\": false, \"use_insecure_key_cache\": false, \"insecure_key_cache_location\": null, \"loop_parallelize\": true, \"dataflow_parallelize\": false, \"auto_parallelize\": false, \"jit\": false, \"p_error\": null, \"global_p_error\": null, \"auto_adjust_rounders\": false, \"single_precision\": false, \"parameter_selection_strategy\": \"multi\", \"show_progress\": false, \"progress_title\": \"\", \"progress_tag\": false, \"fhe_simulation\": false, \"fhe_execution\": true, \"comparison_strategy_preference\": [], \"bitwise_strategy_preference\": [], \"shifts_with_promotion\": true}",
  "client_specs": "{\"bootstrapKeys\":[],\"functionName\":\"main\",\"inputs\":[{\"encryption\":{\"encoding\":{\"isSigned\":false,\"precision\":8},\"secretKeyID\":0,\"variance\":4.8176279425972208e-08},\"shape\":{\"dimensions\":[],\"sign\":false,\"size\":0,\"width\":8}}],\"keyswitchKeys\":[],\"outputs\":[{\"encryption\":{\"encoding\":{\"isSigned\":false,\"precision\":8},\"secretKeyID\":0,\"variance\":4.8176279425972208e-08},\"shape\":{\"dimensions\":[],\"sign\":false,\"size\":0,\"width\":8}}],\"packingKeyswitchKeys\":[],\"secretKeys\":[{\"dimension\":569}]}",
  "polynomial_size": 0,
  "sub": "104796427001204194661",
  "email": "alextmn1@gmail.com",
  "src": "\n@fhe.compiler({\"x\": \"encrypted\"})\ndef circuit(x):\n    return x + 42\n\ninputset = range(128)",
  "name": "My First Test Circuit",
  "description": "This program takes an encrypted value and adds 42 to it",
  "is_private": false,
  "created_time": {
    "$date": "2023-10-10T23:10:12.373Z"
  },
  "deleted": false,
  "complexity": 569,
  "is_published": true
},
{
  "_id": {
    "$oid": "65203562ff956a2c8e3a1d62"
  },
  "mlir": "module {\n  func.func @main(%arg0: !FHE.eint<6>, %arg1: !FHE.eint<6>) -> !FHE.eint<6> {\n    %0 = \"FHE.add_eint\"(%arg0, %arg1) : (!FHE.eint<6>, !FHE.eint<6>) -> !FHE.eint<6>\n    %c42_i7 = arith.constant 42 : i7\n    %1 = \"FHE.add_eint_int\"(%0, %c42_i7) : (!FHE.eint<6>, i7) -> !FHE.eint<6>\n    return %1 : !FHE.eint<6>\n  }\n}",
  "config": "{\"verbose\": false, \"compiler_debug_mode\": false, \"compiler_verbose_mode\": false, \"show_graph\": null, \"show_mlir\": null, \"show_optimizer\": null, \"show_statistics\": null, \"dump_artifacts_on_unexpected_failures\": true, \"enable_unsafe_features\": false, \"use_insecure_key_cache\": false, \"insecure_key_cache_location\": null, \"loop_parallelize\": true, \"dataflow_parallelize\": false, \"auto_parallelize\": false, \"jit\": false, \"p_error\": null, \"global_p_error\": null, \"auto_adjust_rounders\": false, \"single_precision\": false, \"parameter_selection_strategy\": \"multi\", \"show_progress\": false, \"progress_title\": \"\", \"progress_tag\": false, \"fhe_simulation\": false, \"fhe_execution\": true, \"comparison_strategy_preference\": [], \"bitwise_strategy_preference\": [], \"shifts_with_promotion\": true}",
  "client_specs": "{\"bootstrapKeys\":[],\"functionName\":\"main\",\"inputs\":[{\"encryption\":{\"encoding\":{\"isSigned\":false,\"precision\":6},\"secretKeyID\":0,\"variance\":3.7987760643644811e-07},\"shape\":{\"dimensions\":[],\"sign\":false,\"size\":0,\"width\":6}},{\"encryption\":{\"encoding\":{\"isSigned\":false,\"precision\":6},\"secretKeyID\":0,\"variance\":3.7987760643644811e-07},\"shape\":{\"dimensions\":[],\"sign\":false,\"size\":0,\"width\":6}}],\"keyswitchKeys\":[],\"outputs\":[{\"encryption\":{\"encoding\":{\"isSigned\":false,\"precision\":6},\"secretKeyID\":0,\"variance\":3.7987760643644811e-07},\"shape\":{\"dimensions\":[],\"sign\":false,\"size\":0,\"width\":6}}],\"packingKeyswitchKeys\":[],\"secretKeys\":[{\"dimension\":513}]}",
  "polynomial_size": 0,
  "sub": "104796427001204194661",
  "email": "alextmn1@gmail.com",
  "src": "@fhe.compiler({\"x\": \"encrypted\", \"y\": \"encrypted\"})\ndef circuit(x,y):\n    return x + y + 42\n\ninputset = [(1,1), (5,5), (10,10)]",
  "name": "Multiple Input Parameters",
  "description": "This circuit has 2 input parameters: \"x\": \"encrypted\", \"y\": \"encrypted\"",
  "is_private": false,
  "created_time": {
    "$date": "2023-10-08T00:57:55.359Z"
  },
  "deleted": false,
  "complexity": 513,
  "is_published": true
},
{
  "_id": {
    "$oid": "65203590ff956a2c8e3a1d63"
  },
  "mlir": "module {\n  func.func @main(%arg0: !FHE.eint<2>) -> !FHE.esint<3> {\n    %cst = arith.constant dense<[2, -1, 3, 0]> : tensor<4xi64>\n    %0 = \"FHE.apply_lookup_table\"(%arg0, %cst) : (!FHE.eint<2>, tensor<4xi64>) -> !FHE.esint<3>\n    return %0 : !FHE.esint<3>\n  }\n}",
  "config": "{\"verbose\": false, \"compiler_debug_mode\": false, \"compiler_verbose_mode\": false, \"show_graph\": null, \"show_mlir\": null, \"show_optimizer\": null, \"show_statistics\": null, \"dump_artifacts_on_unexpected_failures\": true, \"enable_unsafe_features\": false, \"use_insecure_key_cache\": false, \"insecure_key_cache_location\": null, \"loop_parallelize\": true, \"dataflow_parallelize\": false, \"auto_parallelize\": false, \"jit\": false, \"p_error\": null, \"global_p_error\": null, \"auto_adjust_rounders\": false, \"single_precision\": false, \"parameter_selection_strategy\": \"multi\", \"show_progress\": false, \"progress_title\": \"\", \"progress_tag\": false, \"fhe_simulation\": false, \"fhe_execution\": true, \"comparison_strategy_preference\": [], \"bitwise_strategy_preference\": [], \"shifts_with_promotion\": true}",
  "client_specs": "{\"bootstrapKeys\":[{\"baseLog\":15,\"glweDimension\":5,\"inputLweDimension\":672,\"inputSecretKeyID\":1,\"level\":1,\"outputSecretKeyID\":0,\"polynomialSize\":256,\"variance\":1.979445810846816e-19}],\"functionName\":\"main\",\"inputs\":[{\"encryption\":{\"encoding\":{\"isSigned\":false,\"precision\":2},\"secretKeyID\":0,\"variance\":1.979445810846816e-19},\"shape\":{\"dimensions\":[],\"sign\":false,\"size\":0,\"width\":2}}],\"keyswitchKeys\":[{\"baseLog\":4,\"inputSecretKeyID\":0,\"level\":3,\"outputSecretKeyID\":1,\"variance\":1.0797982869590127e-09}],\"outputs\":[{\"encryption\":{\"encoding\":{\"isSigned\":true,\"precision\":3},\"secretKeyID\":0,\"variance\":1.979445810846816e-19},\"shape\":{\"dimensions\":[],\"sign\":true,\"size\":0,\"width\":3}}],\"packingKeyswitchKeys\":[],\"secretKeys\":[{\"dimension\":1280},{\"dimension\":672}]}",
  "polynomial_size": 256,
  "sub": "104796427001204194661",
  "email": "alextmn1@gmail.com",
  "src": "table = fhe.LookupTable([2, -1, 3, 0])\n\n@fhe.compiler({\"x\": \"encrypted\"})\ndef circuit(x):\n    return table[x]\n\ninputset = range(4)",
  "name": "Lookup Table ",
  "description": "The lookup table using a list of integers",
  "is_private": false,
  "created_time": {
    "$date": "2023-10-08T00:58:00.949Z"
  },
  "deleted": false,
  "complexity": 29944416,
  "is_published": true
},
{
  "_id": {
    "$oid": "65206121ff956a2c8e3a1d65"
  },
  "mlir": "module {\n  func.func @main(%arg0: !FHE.eint<5>) -> !FHE.eint<1> {\n    %c21_i6 = arith.constant 21 : i6\n    %cst = arith.constant dense<[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]> : tensor<32xi64>\n    %0 = \"FHE.apply_lookup_table\"(%arg0, %cst) : (!FHE.eint<5>, tensor<32xi64>) -> !FHE.eint<1>\n    return %0 : !FHE.eint<1>\n  }\n}",
  "config": "{\"verbose\": false, \"compiler_debug_mode\": false, \"compiler_verbose_mode\": false, \"show_graph\": null, \"show_mlir\": null, \"show_optimizer\": null, \"show_statistics\": null, \"dump_artifacts_on_unexpected_failures\": true, \"enable_unsafe_features\": false, \"use_insecure_key_cache\": false, \"insecure_key_cache_location\": null, \"loop_parallelize\": true, \"dataflow_parallelize\": false, \"auto_parallelize\": false, \"jit\": false, \"p_error\": null, \"global_p_error\": null, \"auto_adjust_rounders\": false, \"single_precision\": false, \"parameter_selection_strategy\": \"multi\", \"show_progress\": false, \"progress_title\": \"\", \"progress_tag\": false, \"fhe_simulation\": false, \"fhe_execution\": true, \"comparison_strategy_preference\": [], \"bitwise_strategy_preference\": [], \"shifts_with_promotion\": true}",
  "client_specs": "{\"bootstrapKeys\":[{\"baseLog\":23,\"glweDimension\":1,\"inputLweDimension\":781,\"inputSecretKeyID\":1,\"level\":1,\"outputSecretKeyID\":0,\"polynomialSize\":2048,\"variance\":9.9409770026943975e-32}],\"functionName\":\"main\",\"inputs\":[{\"encryption\":{\"encoding\":{\"isSigned\":false,\"precision\":5},\"secretKeyID\":0,\"variance\":9.9409770026943975e-32},\"shape\":{\"dimensions\":[],\"sign\":false,\"size\":0,\"width\":5}}],\"keyswitchKeys\":[{\"baseLog\":3,\"inputSecretKeyID\":0,\"level\":5,\"outputSecretKeyID\":1,\"variance\":1.9398367323353079e-11}],\"outputs\":[{\"encryption\":{\"encoding\":{\"isSigned\":false,\"precision\":1},\"secretKeyID\":0,\"variance\":9.9409770026943975e-32},\"shape\":{\"dimensions\":[],\"sign\":false,\"size\":0,\"width\":1}}],\"packingKeyswitchKeys\":[],\"secretKeys\":[{\"dimension\":2048},{\"dimension\":781}]}",
  "polynomial_size": 2048,
  "sub": "104796427001204194661",
  "email": "alextmn1@gmail.com",
  "src": "\n@fhe.compiler({\"x\": \"encrypted\"})\ndef circuit(x):\n    return x < 21\n\ninputset = [1, 31]",
  "name": "Comparison Example",
  "description": "Comparison is implemented as a Lookup Table.",
  "is_private": false,
  "created_time": {
    "$date": "2023-10-08T00:58:06.674Z"
  },
  "deleted": false,
  "complexity": 99198195,
  "is_published": true
},
{
  "_id": {
    "$oid": "652069afcbeb18d9069fc86b"
  },
  "mlir": "module {\n  func.func @main(%arg0: !FHE.eint<3>) -> !FHE.esint<3> {\n    %cst = arith.constant dense<[0, 35, 38, 5, -31, -40, -11, 27]> : tensor<8xi64>\n    %0 = \"FHE.apply_lookup_table\"(%arg0, %cst) : (!FHE.eint<3>, tensor<8xi64>) -> !FHE.esint<7>\n    %c10_i5 = arith.constant 10 : i5\n    %cst_0 = arith.constant dense<\"0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000002000000000000000200000000000000020000000000000002000000000000000200000000000000020000000000000002000000000000000200000000000000020000000000000002000000000000000300000000000000030000000000000003000000000000000300000000000000030000000000000003000000000000000300000000000000030000000000000003000000000000000300000000000000040000000000000004000000000000000400000000000000040000000000000004000000000000000400000000000000040000000000000004000000000000000400000000000000040000000000000005000000000000000500000000000000050000000000000005000000000000000500000000000000050000000000000005000000000000000500000000000000050000000000000005000000000000000600000000000000060000000000000006000000000000000600000000000000F9FFFFFFFFFFFFFFF9FFFFFFFFFFFFFFF9FFFFFFFFFFFFFFF9FFFFFFFFFFFFFFFAFFFFFFFFFFFFFFFAFFFFFFFFFFFFFFFAFFFFFFFFFFFFFFFAFFFFFFFFFFFFFFFAFFFFFFFFFFFFFFFAFFFFFFFFFFFFFFFAFFFFFFFFFFFFFFFAFFFFFFFFFFFFFFFAFFFFFFFFFFFFFFFAFFFFFFFFFFFFFFFBFFFFFFFFFFFFFFFBFFFFFFFFFFFFFFFBFFFFFFFFFFFFFFFBFFFFFFFFFFFFFFFBFFFFFFFFFFFFFFFBFFFFFFFFFFFFFFFBFFFFFFFFFFFFFFFBFFFFFFFFFFFFFFFBFFFFFFFFFFFFFFFBFFFFFFFFFFFFFFFCFFFFFFFFFFFFFFFCFFFFFFFFFFFFFFFCFFFFFFFFFFFFFFFCFFFFFFFFFFFFFFFCFFFFFFFFFFFFFFFCFFFFFFFFFFFFFFFCFFFFFFFFFFFFFFFCFFFFFFFFFFFFFFFCFFFFFFFFFFFFFFFCFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\"> : tensor<128xi64>\n    %1 = \"FHE.apply_lookup_table\"(%0, %cst_0) : (!FHE.esint<7>, tensor<128xi64>) -> !FHE.esint<3>\n    return %1 : !FHE.esint<3>\n  }\n}",
  "config": "{\"verbose\": false, \"compiler_debug_mode\": false, \"compiler_verbose_mode\": false, \"show_graph\": null, \"show_mlir\": null, \"show_optimizer\": null, \"show_statistics\": null, \"dump_artifacts_on_unexpected_failures\": true, \"enable_unsafe_features\": false, \"use_insecure_key_cache\": false, \"insecure_key_cache_location\": null, \"loop_parallelize\": true, \"dataflow_parallelize\": false, \"auto_parallelize\": false, \"jit\": false, \"p_error\": null, \"global_p_error\": null, \"auto_adjust_rounders\": false, \"single_precision\": false, \"parameter_selection_strategy\": \"multi\", \"show_progress\": false, \"progress_title\": \"\", \"progress_tag\": false, \"fhe_simulation\": false, \"fhe_execution\": true, \"comparison_strategy_preference\": [], \"bitwise_strategy_preference\": [], \"shifts_with_promotion\": true}",
  "client_specs": "{\"bootstrapKeys\":[{\"baseLog\":12,\"glweDimension\":3,\"inputLweDimension\":696,\"inputSecretKeyID\":1,\"level\":2,\"outputSecretKeyID\":0,\"polynomialSize\":512,\"variance\":1.573398630171941e-23},{\"baseLog\":22,\"glweDimension\":1,\"inputLweDimension\":837,\"inputSecretKeyID\":2,\"level\":1,\"outputSecretKeyID\":3,\"polynomialSize\":8192,\"variance\":4.70197740328915e-38}],\"functionName\":\"main\",\"inputs\":[{\"encryption\":{\"encoding\":{\"isSigned\":false,\"precision\":3},\"secretKeyID\":0,\"variance\":1.573398630171941e-23},\"shape\":{\"dimensions\":[],\"sign\":false,\"size\":0,\"width\":3}}],\"keyswitchKeys\":[{\"baseLog\":3,\"inputSecretKeyID\":0,\"level\":4,\"outputSecretKeyID\":1,\"variance\":4.456514301117425e-10},{\"baseLog\":2,\"inputSecretKeyID\":0,\"level\":9,\"outputSecretKeyID\":2,\"variance\":2.4601112272561634e-12}],\"outputs\":[{\"encryption\":{\"encoding\":{\"isSigned\":true,\"precision\":3},\"secretKeyID\":3,\"variance\":4.70197740328915e-38},\"shape\":{\"dimensions\":[],\"sign\":true,\"size\":0,\"width\":3}}],\"packingKeyswitchKeys\":[],\"secretKeys\":[{\"dimension\":1536},{\"dimension\":696},{\"dimension\":837},{\"dimension\":8192}]}",
  "polynomial_size": 512,
  "sub": "104796427001204194661",
  "email": "alextmn1@gmail.com",
  "src": "import numpy as np\n\n@fhe.compiler({\"x\": \"encrypted\"})\ndef circuit(x):\n    return (42 * np.sin(x)).astype(np.int64) // 10\n\ninputset = range(8)",
  "name": "Fused table lookup",
  "description": "As FHE works with addition and multiplication only, but we can `fuse` some operations into table lookups automatically so these lookup tables don't need to be created manually",
  "is_private": false,
  "created_time": {
    "$date": "2023-10-08T00:58:15.801Z"
  },
  "deleted": false,
  "complexity": 497319939,
  "is_published": true
},
{
  "_id": {
    "$oid": "65207d2ccbeb18d9069fc86c"
  },
  "mlir": "module {\n  func.func @main(%arg0: !FHE.eint<4>, %arg1: !FHE.eint<4>) -> !FHE.eint<2> {\n    %c4_i5 = arith.constant 4 : i5\n    %0 = \"FHE.mul_eint_int\"(%arg0, %c4_i5) : (!FHE.eint<4>, i5) -> !FHE.eint<4>\n    %1 = \"FHE.add_eint\"(%0, %arg1) : (!FHE.eint<4>, !FHE.eint<4>) -> !FHE.eint<4>\n    %cst = arith.constant dense<[0, 1, 2, 3, 3, 2, 1, 0, 2, 0, 3, 1, 1, 3, 2, 0]> : tensor<16xi64>\n    %2 = \"FHE.apply_lookup_table\"(%1, %cst) : (!FHE.eint<4>, tensor<16xi64>) -> !FHE.eint<2>\n    return %2 : !FHE.eint<2>\n  }\n}",
  "config": "{\"verbose\": false, \"compiler_debug_mode\": false, \"compiler_verbose_mode\": false, \"show_graph\": null, \"show_mlir\": null, \"show_optimizer\": null, \"show_statistics\": null, \"dump_artifacts_on_unexpected_failures\": true, \"enable_unsafe_features\": false, \"use_insecure_key_cache\": false, \"insecure_key_cache_location\": null, \"loop_parallelize\": true, \"dataflow_parallelize\": false, \"auto_parallelize\": false, \"jit\": false, \"p_error\": null, \"global_p_error\": null, \"auto_adjust_rounders\": false, \"single_precision\": false, \"parameter_selection_strategy\": \"multi\", \"show_progress\": false, \"progress_title\": \"\", \"progress_tag\": false, \"fhe_simulation\": false, \"fhe_execution\": true, \"comparison_strategy_preference\": [], \"bitwise_strategy_preference\": [], \"shifts_with_promotion\": true}",
  "client_specs": "{\"bootstrapKeys\":[{\"baseLog\":8,\"glweDimension\":1,\"inputLweDimension\":732,\"inputSecretKeyID\":1,\"level\":2,\"outputSecretKeyID\":0,\"polynomialSize\":1024,\"variance\":2.4902816380683179e-15}],\"functionName\":\"main\",\"inputs\":[{\"encryption\":{\"encoding\":{\"isSigned\":false,\"precision\":4},\"secretKeyID\":0,\"variance\":2.4902816380683179e-15},\"shape\":{\"dimensions\":[],\"sign\":false,\"size\":0,\"width\":4}},{\"encryption\":{\"encoding\":{\"isSigned\":false,\"precision\":4},\"secretKeyID\":0,\"variance\":2.4902816380683179e-15},\"shape\":{\"dimensions\":[],\"sign\":false,\"size\":0,\"width\":4}}],\"keyswitchKeys\":[{\"baseLog\":3,\"inputSecretKeyID\":0,\"level\":4,\"outputSecretKeyID\":1,\"variance\":1.1816104144472139e-10}],\"outputs\":[{\"encryption\":{\"encoding\":{\"isSigned\":false,\"precision\":2},\"secretKeyID\":0,\"variance\":2.4902816380683179e-15},\"shape\":{\"dimensions\":[],\"sign\":false,\"size\":0,\"width\":2}}],\"packingKeyswitchKeys\":[],\"secretKeys\":[{\"dimension\":1024},{\"dimension\":732}]}",
  "polynomial_size": 1024,
  "sub": "104796427001204194661",
  "email": "alextmn1@gmail.com",
  "src": "import numpy as np\n\nmulti_dimensional_table = [\n    [0, 1, 2, 3],\n    [3, 2, 1, 0],\n    [2, 0, 3, 1],\n    [1, 3, 2, 0],\n]\nflat_table = fhe.LookupTable(np.array(multi_dimensional_table).flatten())\n\n@fhe.compiler({\"x\": \"encrypted\", \"y\": \"encrypted\"})\ndef circuit(x, y):\n    packed_x_and_y = (x * (2**2)) + y\n    return flat_table[packed_x_and_y]\n\ninputset = [\n    (0, 0), (1, 1), (2, 2), (3, 3)\n]",
  "name": "Two dimensions LookupTable",
  "description": "This is an example of 4x4 lookup table",
  "is_private": false,
  "created_time": {
    "$date": "2023-10-08T00:58:21.016Z"
  },
  "deleted": false,
  "complexity": 61476132,
  "is_published": true
},
{
  "_id": {
    "$oid": "6523580b53e2b11820a4001a"
  },
  "mlir": "module {\n  func.func @main(%arg0: tensor<2x!FHE.eint<4>>, %arg1: !FHE.eint<4>) -> !FHE.eint<4> {\n    %cst = arith.constant dense<[[1, 2]]> : tensor<1x2xi5>\n    %0 = \"FHELinalg.to_signed\"(%arg0) : (tensor<2x!FHE.eint<4>>) -> tensor<2x!FHE.esint<4>>\n    %1 = \"FHELinalg.matmul_int_eint\"(%cst, %0) : (tensor<1x2xi5>, tensor<2x!FHE.esint<4>>) -> tensor<1x!FHE.esint<4>>\n    %2 = \"FHELinalg.to_unsigned\"(%1) : (tensor<1x!FHE.esint<4>>) -> tensor<1x!FHE.eint<4>>\n    %3 = \"FHELinalg.sum\"(%2) {axes = [], keep_dims = false} : (tensor<1x!FHE.eint<4>>) -> !FHE.eint<4>\n    %4 = \"FHE.add_eint\"(%3, %arg1) : (!FHE.eint<4>, !FHE.eint<4>) -> !FHE.eint<4>\n    return %4 : !FHE.eint<4>\n  }\n}",
  "complexity": 512,
  "config": "{\"verbose\": false, \"compiler_debug_mode\": false, \"compiler_verbose_mode\": false, \"show_graph\": null, \"show_mlir\": null, \"show_optimizer\": null, \"show_statistics\": null, \"dump_artifacts_on_unexpected_failures\": true, \"enable_unsafe_features\": false, \"use_insecure_key_cache\": false, \"insecure_key_cache_location\": null, \"loop_parallelize\": true, \"dataflow_parallelize\": false, \"auto_parallelize\": false, \"jit\": false, \"p_error\": null, \"global_p_error\": null, \"auto_adjust_rounders\": false, \"single_precision\": false, \"parameter_selection_strategy\": \"multi\", \"show_progress\": false, \"progress_title\": \"\", \"progress_tag\": false, \"fhe_simulation\": false, \"fhe_execution\": true, \"comparison_strategy_preference\": [], \"bitwise_strategy_preference\": [], \"shifts_with_promotion\": true}",
  "client_specs": "{\"bootstrapKeys\":[],\"functionName\":\"main\",\"inputs\":[{\"encryption\":{\"encoding\":{\"isSigned\":false,\"precision\":4},\"secretKeyID\":0,\"variance\":3.9414694521645414e-07},\"shape\":{\"dimensions\":[2],\"sign\":false,\"size\":2,\"width\":4}},{\"encryption\":{\"encoding\":{\"isSigned\":false,\"precision\":4},\"secretKeyID\":0,\"variance\":3.9414694521645414e-07},\"shape\":{\"dimensions\":[],\"sign\":false,\"size\":0,\"width\":4}}],\"keyswitchKeys\":[],\"outputs\":[{\"encryption\":{\"encoding\":{\"isSigned\":false,\"precision\":4},\"secretKeyID\":0,\"variance\":3.9414694521645414e-07},\"shape\":{\"dimensions\":[],\"sign\":false,\"size\":0,\"width\":4}}],\"packingKeyswitchKeys\":[],\"secretKeys\":[{\"dimension\":512}]}",
  "polynomial_size": 0,
  "sub": "104796427001204194661",
  "email": "alextmn1@gmail.com",
  "src": "\nimport numpy as np\na = [[1,2]]\n\n@fhe.compiler({\"x\": \"encrypted\", \"b\": \"encrypted\"})\ndef circuit(x, b):\n    m = np.matmul(a,x)\n    return np.sum(m) + b\n\ninputset = [([1,2],3)]",
  "name": "Matrix Multiplication Example",
  "description": "FHE Matrix Multiplication Example. This could be used in regular regression or logistic regression",
  "is_private": false,
  "is_published": true,
  "created_time": {
    "$date": "2023-10-10T01:34:17.603Z"
  },
  "deleted": false
},
{
  "_id": {
    "$oid": "652ec5ab3d08ab5d10a58874"
  },
  "mlir": "module {\n  func.func @main(%arg0: tensor<3x!FHE.esint<8>>) -> !FHE.esint<8> {\n    %cst = arith.constant dense<[[38, 13, 25]]> : tensor<1x3xi9>\n    %0 = \"FHELinalg.matmul_int_eint\"(%cst, %arg0) : (tensor<1x3xi9>, tensor<3x!FHE.esint<8>>) -> tensor<1x!FHE.esint<8>>\n    %1 = \"FHELinalg.sum\"(%0) {axes = [], keep_dims = false} : (tensor<1x!FHE.esint<8>>) -> !FHE.esint<8>\n    %c-67_i9 = arith.constant -67 : i9\n    %2 = \"FHE.add_eint_int\"(%1, %c-67_i9) : (!FHE.esint<8>, i9) -> !FHE.esint<8>\n    return %2 : !FHE.esint<8>\n  }\n}",
  "complexity": 778,
  "config": "{\"verbose\": false, \"compiler_debug_mode\": false, \"compiler_verbose_mode\": false, \"show_graph\": null, \"show_mlir\": null, \"show_optimizer\": null, \"show_statistics\": null, \"dump_artifacts_on_unexpected_failures\": true, \"enable_unsafe_features\": false, \"use_insecure_key_cache\": false, \"insecure_key_cache_location\": null, \"loop_parallelize\": true, \"dataflow_parallelize\": false, \"auto_parallelize\": false, \"jit\": false, \"p_error\": null, \"global_p_error\": null, \"auto_adjust_rounders\": false, \"single_precision\": false, \"parameter_selection_strategy\": \"multi\", \"show_progress\": false, \"progress_title\": \"\", \"progress_tag\": false, \"fhe_simulation\": false, \"fhe_execution\": true, \"comparison_strategy_preference\": [], \"bitwise_strategy_preference\": [], \"shifts_with_promotion\": true}",
  "client_specs": "{\"bootstrapKeys\":[],\"functionName\":\"main\",\"inputs\":[{\"encryption\":{\"encoding\":{\"isSigned\":true,\"precision\":8},\"secretKeyID\":0,\"variance\":2.1667489510257459e-11},\"shape\":{\"dimensions\":[3],\"sign\":true,\"size\":3,\"width\":8}}],\"keyswitchKeys\":[],\"outputs\":[{\"encryption\":{\"encoding\":{\"isSigned\":true,\"precision\":8},\"secretKeyID\":0,\"variance\":2.1667489510257459e-11},\"shape\":{\"dimensions\":[],\"sign\":true,\"size\":0,\"width\":8}}],\"packingKeyswitchKeys\":[],\"secretKeys\":[{\"dimension\":778}]}",
  "polynomial_size": 0,
  "sub": "104796427001204194661",
  "email": "alextmn1@gmail.com",
  "src": "\nimport numpy as np\n\n# TFHE support only integers, so we need to quantify floats to ints\n#\n# Quantization could be a bit more complex to reach the better results, \n# more is here https://huggingface.co/docs/optimum/concept_guides/quantization\ndef qvalues(values):\n    return np.rint(np.array(values) * 127. + 0 ).astype(np.int8)\n\n#linear model intercept\nintercept = qvalues([-.53]).item()\n\n#linear model coefs\ntheta = [ qvalues([0.3, .1, .2]) ] \n\n@fhe.compiler({\"x\": \"encrypted\"})\ndef circuit(x):\n    m = np.matmul(theta,x)\n    # keep in mind, the decrypted value needs to be devided by 127*127\n    #to dequantifized because of matmul at the previous step\n    return np.sum(m) + intercept\n\ninputset = [ qvalues([-.9, -.9, -.9]), qvalues([.9, .9, .9]) ]",
  "name": "Linear Regression",
  "description": "Modelling the liner relationship for encrypted vectors. Using floating numbers [-1..+1]",
  "is_private": false,
  "is_published": true,
  "created_time": {
    "$date": "2023-10-17T18:03:53.320Z"
  },
  "deleted": false
},
{
  "_id": {
    "$oid": "65380af9ac9b9a51d3c1f18c"
  },
  "mlir": "module {\n  func.func @main(%arg0: !FHE.eint<6>) -> !FHE.eint<7> {\n    %c2_i3 = arith.constant 2 : i3\n    %cst = arith.constant dense<[2, 3, 0, 1, 6, 7, 4, 5, 10, 11, 8, 9, 14, 15, 12, 13, 18, 19, 16, 17, 22, 23, 20, 21, 26, 27, 24, 25, 30, 31, 28, 29, 34, 35, 32, 33, 38, 39, 36, 37, 42, 43, 40, 41, 46, 47, 44, 45, 50, 51, 48, 49, 54, 55, 52, 53, 58, 59, 56, 57, 62, 63, 60, 61]> : tensor<64xi64>\n    %0 = \"FHE.apply_lookup_table\"(%arg0, %cst) : (!FHE.eint<6>, tensor<64xi64>) -> !FHE.eint<7>\n    %1 = \"FHE.add_eint\"(%0, %0) : (!FHE.eint<7>, !FHE.eint<7>) -> !FHE.eint<7>\n    return %1 : !FHE.eint<7>\n  }\n}",
  "complexity": 230210706,
  "config": "{\"verbose\": false, \"compiler_debug_mode\": false, \"compiler_verbose_mode\": false, \"show_graph\": null, \"show_mlir\": null, \"show_optimizer\": null, \"show_statistics\": null, \"dump_artifacts_on_unexpected_failures\": true, \"enable_unsafe_features\": false, \"use_insecure_key_cache\": false, \"insecure_key_cache_location\": null, \"loop_parallelize\": true, \"dataflow_parallelize\": false, \"auto_parallelize\": false, \"jit\": false, \"p_error\": null, \"global_p_error\": null, \"auto_adjust_rounders\": false, \"single_precision\": false, \"parameter_selection_strategy\": \"multi\", \"show_progress\": false, \"progress_title\": \"\", \"progress_tag\": false, \"fhe_simulation\": false, \"fhe_execution\": true, \"comparison_strategy_preference\": [], \"bitwise_strategy_preference\": [], \"shifts_with_promotion\": true}",
  "client_specs": "{\"bootstrapKeys\":[{\"baseLog\":22,\"glweDimension\":1,\"inputLweDimension\":878,\"inputSecretKeyID\":1,\"level\":1,\"outputSecretKeyID\":0,\"polynomialSize\":4096,\"variance\":4.70197740328915e-38}],\"functionName\":\"main\",\"inputs\":[{\"encryption\":{\"encoding\":{\"isSigned\":false,\"precision\":6},\"secretKeyID\":0,\"variance\":4.70197740328915e-38},\"shape\":{\"dimensions\":[],\"sign\":false,\"size\":0,\"width\":6}}],\"keyswitchKeys\":[{\"baseLog\":4,\"inputSecretKeyID\":0,\"level\":4,\"outputSecretKeyID\":1,\"variance\":5.4245209175080076e-13}],\"outputs\":[{\"encryption\":{\"encoding\":{\"isSigned\":false,\"precision\":7},\"secretKeyID\":0,\"variance\":4.70197740328915e-38},\"shape\":{\"dimensions\":[],\"sign\":false,\"size\":0,\"width\":7}}],\"packingKeyswitchKeys\":[],\"secretKeys\":[{\"dimension\":4096},{\"dimension\":878}]}",
  "polynomial_size": 4096,
  "sub": "65374687ac9b9a51d3c1f18a",
  "email": "alex@alex.com",
  "src": "\n@fhe.compiler({\"x\": \"encrypted\"})\ndef circuit(x):\n    a = x ^ 2\n    b = x ^ 2\n    return a + b\n\ninputset = range(63)",
  "name": "XOR Circuit",
  "description": "",
  "is_private": false,
  "is_published": false,
  "created_time": {
    "$date": "2023-10-28T16:10:24.273Z"
  },
  "deleted": false
},
{
  "_id": {
    "$oid": "65ade87ae3b6f89b1e412fef"
  },
  "mlir": "module {\n  func.func @main(%arg0: tensor<4x!FHE.eint<3>>, %arg1: tensor<4x!FHE.eint<3>>) -> !FHE.eint<1> {\n    %c0 = arith.constant 0 : index\n    %extracted = tensor.extract %arg0[%c0] : tensor<4x!FHE.eint<3>>\n    %c1_i4 = arith.constant 1 : i4\n    %0 = \"FHE.add_eint_int\"(%extracted, %c1_i4) : (!FHE.eint<3>, i4) -> !FHE.eint<3>\n    %extracted_0 = tensor.extract %arg1[%c0] : tensor<4x!FHE.eint<3>>\n    %1 = \"FHE.sub_eint\"(%0, %extracted_0) : (!FHE.eint<3>, !FHE.eint<3>) -> !FHE.eint<3>\n    %c0_i4 = arith.constant 0 : i4\n    %2 = \"FHE.add_eint_int\"(%1, %c0_i4) : (!FHE.eint<3>, i4) -> !FHE.eint<3>\n    %cst = arith.constant dense<[1, 0, 0, 0, 1, 1, 1, 1]> : tensor<8xi64>\n    %3 = \"FHE.apply_lookup_table\"(%2, %cst) : (!FHE.eint<3>, tensor<8xi64>) -> !FHE.eint<3>\n    %c1 = arith.constant 1 : index\n    %extracted_1 = tensor.extract %arg0[%c1] : tensor<4x!FHE.eint<3>>\n    %4 = \"FHE.add_eint_int\"(%extracted_1, %c1_i4) : (!FHE.eint<3>, i4) -> !FHE.eint<3>\n    %extracted_2 = tensor.extract %arg1[%c1] : tensor<4x!FHE.eint<3>>\n    %5 = \"FHE.sub_eint\"(%4, %extracted_2) : (!FHE.eint<3>, !FHE.eint<3>) -> !FHE.eint<3>\n    %c4_i4 = arith.constant 4 : i4\n    %6 = \"FHE.mul_eint_int\"(%3, %c4_i4) : (!FHE.eint<3>, i4) -> !FHE.eint<3>\n    %7 = \"FHE.add_eint\"(%6, %5) : (!FHE.eint<3>, !FHE.eint<3>) -> !FHE.eint<3>\n    %8 = \"FHE.apply_lookup_table\"(%7, %cst) : (!FHE.eint<3>, tensor<8xi64>) -> !FHE.eint<3>\n    %c2 = arith.constant 2 : index\n    %extracted_3 = tensor.extract %arg0[%c2] : tensor<4x!FHE.eint<3>>\n    %9 = \"FHE.add_eint_int\"(%extracted_3, %c1_i4) : (!FHE.eint<3>, i4) -> !FHE.eint<3>\n    %extracted_4 = tensor.extract %arg1[%c2] : tensor<4x!FHE.eint<3>>\n    %10 = \"FHE.sub_eint\"(%9, %extracted_4) : (!FHE.eint<3>, !FHE.eint<3>) -> !FHE.eint<3>\n    %11 = \"FHE.mul_eint_int\"(%8, %c4_i4) : (!FHE.eint<3>, i4) -> !FHE.eint<3>\n    %12 = \"FHE.add_eint\"(%11, %10) : (!FHE.eint<3>, !FHE.eint<3>) -> !FHE.eint<3>\n    %13 = \"FHE.apply_lookup_table\"(%12, %cst) : (!FHE.eint<3>, tensor<8xi64>) -> !FHE.eint<3>\n    %c3 = arith.constant 3 : index\n    %extracted_5 = tensor.extract %arg0[%c3] : tensor<4x!FHE.eint<3>>\n    %14 = \"FHE.add_eint_int\"(%extracted_5, %c1_i4) : (!FHE.eint<3>, i4) -> !FHE.eint<3>\n    %extracted_6 = tensor.extract %arg1[%c3] : tensor<4x!FHE.eint<3>>\n    %15 = \"FHE.sub_eint\"(%14, %extracted_6) : (!FHE.eint<3>, !FHE.eint<3>) -> !FHE.eint<3>\n    %16 = \"FHE.mul_eint_int\"(%13, %c4_i4) : (!FHE.eint<3>, i4) -> !FHE.eint<3>\n    %17 = \"FHE.add_eint\"(%16, %15) : (!FHE.eint<3>, !FHE.eint<3>) -> !FHE.eint<3>\n    %18 = \"FHE.apply_lookup_table\"(%17, %cst) : (!FHE.eint<3>, tensor<8xi64>) -> !FHE.eint<1>\n    return %18 : !FHE.eint<1>\n  }\n}",
  "complexity": 181687412,
  "config": "{\"verbose\": false, \"compiler_debug_mode\": false, \"compiler_verbose_mode\": false, \"show_graph\": null, \"show_mlir\": null, \"show_optimizer\": null, \"show_statistics\": null, \"dump_artifacts_on_unexpected_failures\": true, \"enable_unsafe_features\": false, \"use_insecure_key_cache\": false, \"insecure_key_cache_location\": null, \"loop_parallelize\": true, \"dataflow_parallelize\": false, \"auto_parallelize\": false, \"jit\": false, \"p_error\": null, \"global_p_error\": null, \"auto_adjust_rounders\": false, \"single_precision\": false, \"parameter_selection_strategy\": \"multi\", \"show_progress\": false, \"progress_title\": \"\", \"progress_tag\": false, \"fhe_simulation\": false, \"fhe_execution\": true, \"comparison_strategy_preference\": [], \"bitwise_strategy_preference\": [], \"shifts_with_promotion\": true}",
  "client_specs": "{\"bootstrapKeys\":[{\"baseLog\":18,\"glweDimension\":3,\"inputLweDimension\":739,\"inputSecretKeyID\":1,\"level\":1,\"outputSecretKeyID\":0,\"polynomialSize\":512,\"variance\":1.573398630171941e-23}],\"functionName\":\"main\",\"inputs\":[{\"encryption\":{\"encoding\":{\"isSigned\":false,\"precision\":3},\"secretKeyID\":0,\"variance\":1.573398630171941e-23},\"shape\":{\"dimensions\":[4],\"sign\":false,\"size\":4,\"width\":3}},{\"encryption\":{\"encoding\":{\"isSigned\":false,\"precision\":3},\"secretKeyID\":0,\"variance\":1.573398630171941e-23},\"shape\":{\"dimensions\":[4],\"sign\":false,\"size\":4,\"width\":3}}],\"keyswitchKeys\":[{\"baseLog\":3,\"inputSecretKeyID\":0,\"level\":4,\"outputSecretKeyID\":1,\"variance\":9.1279448113361444e-11}],\"outputs\":[{\"encryption\":{\"encoding\":{\"isSigned\":false,\"precision\":1},\"secretKeyID\":0,\"variance\":1.573398630171941e-23},\"shape\":{\"dimensions\":[],\"sign\":false,\"size\":0,\"width\":1}}],\"packingKeyswitchKeys\":[],\"secretKeys\":[{\"dimension\":1536},{\"dimension\":739}]}",
  "polynomial_size": 512,
  "sub": "104796427001204194661",
  "email": "alextmn1@gmail.com",
  "src": "# 0 0000 -> 1 less (1+0-1), set the curry bit\n# 1 0001 -> 0, equal (1+1-1) or (1+0-0)\n# 2 0010 -> 0, greater (1+1-0)\n# 3 0100 -> 0 (does not exists)\n# curry bit set\n# 5 1000 -> 1\n# 6 1100 -> 1\n# 7 1010 -> 1\n# 8 1010 -> 1\n\ntable = fhe.LookupTable([1,0,0,0,1,1,1,1])\n\n# result is 1 if less, 0 otherwise\n@fhe.compiler({\"x\": \"encrypted\", \"y\": \"encrypted\"})\ndef circuit(x, y):\n    curry = 0\n    \n\n    for i in range(4):\n        s = 1 + x[i] - y[i]\n        curry4 = curry*4 + s\n        curry = table[curry4]\n\n    return curry\n\ninputset = [([0,1, 1, 1], [1,0, 1,1])]",
  "name": "Fast Comparison",
  "description": "You have to decompose each 8-bit integer into its binary representation.",
  "is_private": false,
  "is_published": true,
  "created_time": {
    "$date": "2024-01-22T05:02:27.334Z"
  },
  "deleted": false
},
{
  "_id": {
    "$oid": "65bd0041e3b6f89b1e412ff5"
  },
  "mlir": "module {\n  func.func @main(%arg0: !FHE.eint<6>) -> !FHE.eint<6> {\n    %c43_i7 = arith.constant 43 : i7\n    %0 = \"FHE.add_eint_int\"(%arg0, %c43_i7) : (!FHE.eint<6>, i7) -> !FHE.eint<6>\n    return %0 : !FHE.eint<6>\n  }\n}",
  "complexity": 512,
  "config": "{\"verbose\": false, \"compiler_debug_mode\": false, \"compiler_verbose_mode\": false, \"show_graph\": null, \"show_mlir\": null, \"show_optimizer\": null, \"show_statistics\": null, \"dump_artifacts_on_unexpected_failures\": true, \"enable_unsafe_features\": false, \"use_insecure_key_cache\": false, \"insecure_key_cache_location\": null, \"loop_parallelize\": true, \"dataflow_parallelize\": false, \"auto_parallelize\": false, \"jit\": false, \"p_error\": null, \"global_p_error\": null, \"auto_adjust_rounders\": false, \"single_precision\": false, \"parameter_selection_strategy\": \"multi\", \"show_progress\": false, \"progress_title\": \"\", \"progress_tag\": false, \"fhe_simulation\": false, \"fhe_execution\": true, \"comparison_strategy_preference\": [], \"bitwise_strategy_preference\": [], \"shifts_with_promotion\": true}",
  "client_specs": "{\"bootstrapKeys\":[],\"functionName\":\"main\",\"inputs\":[{\"encryption\":{\"encoding\":{\"isSigned\":false,\"precision\":6},\"secretKeyID\":0,\"variance\":3.9414694521645414e-07},\"shape\":{\"dimensions\":[],\"sign\":false,\"size\":0,\"width\":6}}],\"keyswitchKeys\":[],\"outputs\":[{\"encryption\":{\"encoding\":{\"isSigned\":false,\"precision\":6},\"secretKeyID\":0,\"variance\":3.9414694521645414e-07},\"shape\":{\"dimensions\":[],\"sign\":false,\"size\":0,\"width\":6}}],\"packingKeyswitchKeys\":[],\"secretKeys\":[{\"dimension\":512}]}",
  "polynomial_size": 0,
  "sub": "65b8b0d8e3b6f89b1e412ff1",
  "email": "benoit.chevalliermames@zama.ai",
  "src": "\n@fhe.compiler({\"x\": \"encrypted\"})\ndef circuit(x):\n    return x + 43\n\ninputset = range(10)",
  "name": "benoit.chevalliermames-fhe-circuit-76314",
  "description": "",
  "is_private": false,
  "is_published": true,
  "created_time": {
    "$date": "2024-02-02T14:47:26.259Z"
  },
  "deleted": true,
  "deleted_at": {
    "$date": "2024-02-02T14:47:41.721Z"
  }
}]